/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.practica_tema_17_programacion;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class Aplicacion extends javax.swing.JFrame {

    protected Connection conexion;
    public static final String URL = "jdbc:mysql://localhost:3306/mascotas";
    public static final String usuario = "root";
    public static final String contraseña = "1234";
    PreparedStatement ps; //Da datos
    ResultSet rs; //Obtiiene datos

    public Connection getConnection() {  //Esto hay que ponserlo siempre

        try {
            //Class.forName("com.mysql.jdbc.Driver");
            conexion = (Connection) DriverManager.getConnection(URL, usuario, contraseña);
            //JOptionPane.showMessageDialog(null,"Conexión establecida con éxito ");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e);

        }
        return conexion;
    }

    //Vamos a crear un método que limpie lo que escribes en los TEXTFIELD del Jframe
    public void limpiarCajas() {
        CajaBuscar.setText(null);
        CajaIDMascota.setText(null);
        CajaAliasMascota.setText(null);
        CajaEspecie.setText(null);
        CajaRaza.setText(null);
        CajaColorPelo.setText(null);
        CajaFechaNacimiento.setText(null);
        CajaVacunaciones.setText(null);
        CajaMascotasConMasVacunas.setText(null);
    }

    /**
     * Creates new form Aplicacion
     */
    public Aplicacion() {
        initComponents();

        setTitle("Realizado por: Javier Álvarez");
        setSize(1000, 900);

        setLocationRelativeTo(null); // Centra la ventana en la pantalla
        setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        IDMascota = new javax.swing.JLabel();
        CajaIDMascota = new javax.swing.JTextField();
        AliasMascota = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        CajaAliasMascota = new javax.swing.JTextField();
        Especie = new javax.swing.JLabel();
        CajaEspecie = new javax.swing.JTextField();
        Raza = new javax.swing.JLabel();
        CajaRaza = new javax.swing.JTextField();
        ColorPelo = new javax.swing.JLabel();
        CajaColorPelo = new javax.swing.JTextField();
        FechaNacimiento = new javax.swing.JLabel();
        CajaFechaNacimiento = new javax.swing.JTextField();
        Vacunaciones = new javax.swing.JLabel();
        CajaVacunaciones = new javax.swing.JTextField();
        Boton_insertar = new javax.swing.JButton();
        Boton_Modificar = new javax.swing.JButton();
        Boton_Eliminar = new javax.swing.JButton();
        Boton_Limpiar = new javax.swing.JButton();
        Boton_Buscar = new javax.swing.JButton();
        CajaBuscar = new javax.swing.JTextField();
        BotonMascotasConMasVacunas = new javax.swing.JButton();
        CajaMascotasConMasVacunas = new javax.swing.JTextField();
        BotonMascotasMasPesadas = new javax.swing.JButton();
        BotonRecuentoMascotas = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Insertar_txt = new javax.swing.JButton();
        jTextField8 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        Boton_Mostrar_Todo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        IDMascota.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        IDMascota.setText("ID MASCOTA:");
        jPanel1.add(IDMascota, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        CajaIDMascota.setBackground(new java.awt.Color(255, 255, 204));
        CajaIDMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CajaIDMascotaActionPerformed(evt);
            }
        });
        jPanel1.add(CajaIDMascota, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 120, 230, 40));

        AliasMascota.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        AliasMascota.setText("AliasMascota:");
        jPanel1.add(AliasMascota, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        jTextField2.setBackground(new java.awt.Color(255, 255, 153));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 180, 40));

        CajaAliasMascota.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.add(CajaAliasMascota, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 230, 40));

        Especie.setBackground(new java.awt.Color(153, 153, 153));
        Especie.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Especie.setText("Especie: ");
        jPanel1.add(Especie, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        CajaEspecie.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.add(CajaEspecie, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 220, 230, 40));

        Raza.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Raza.setText("Raza: ");
        jPanel1.add(Raza, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));

        CajaRaza.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.add(CajaRaza, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 270, 230, 40));

        ColorPelo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        ColorPelo.setText("Color del pelo: ");
        jPanel1.add(ColorPelo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, -1));

        CajaColorPelo.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.add(CajaColorPelo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, 230, 40));

        FechaNacimiento.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        FechaNacimiento.setText("Fecha de nacimiento: ");
        jPanel1.add(FechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, -1, -1));

        CajaFechaNacimiento.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.add(CajaFechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 380, 190, 40));

        Vacunaciones.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Vacunaciones.setText("Vacunaciones: ");
        jPanel1.add(Vacunaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, -1, -1));

        CajaVacunaciones.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.add(CajaVacunaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 440, 220, 40));

        Boton_insertar.setBackground(new java.awt.Color(204, 255, 204));
        Boton_insertar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Boton_insertar.setText("INSERTAR");
        Boton_insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_insertarActionPerformed(evt);
            }
        });
        jPanel1.add(Boton_insertar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 280, 280, 50));

        Boton_Modificar.setBackground(new java.awt.Color(204, 255, 204));
        Boton_Modificar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Boton_Modificar.setText("MODIFICAR");
        Boton_Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_ModificarActionPerformed(evt);
            }
        });
        jPanel1.add(Boton_Modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 220, 280, 50));

        Boton_Eliminar.setBackground(new java.awt.Color(204, 255, 204));
        Boton_Eliminar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Boton_Eliminar.setText("ELIMINAR");
        Boton_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_EliminarActionPerformed(evt);
            }
        });
        jPanel1.add(Boton_Eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 90, 280, 50));

        Boton_Limpiar.setBackground(new java.awt.Color(204, 255, 204));
        Boton_Limpiar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Boton_Limpiar.setText("LIMPIAR");
        Boton_Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_LimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(Boton_Limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 150, 280, 50));

        Boton_Buscar.setBackground(new java.awt.Color(204, 255, 204));
        Boton_Buscar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Boton_Buscar.setText("BUSCAR");
        Boton_Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_BuscarActionPerformed(evt);
            }
        });
        jPanel1.add(Boton_Buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, 280, 50));
        jPanel1.add(CajaBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 450, 50));

        BotonMascotasConMasVacunas.setBackground(new java.awt.Color(153, 153, 255));
        BotonMascotasConMasVacunas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotonMascotasConMasVacunas.setText("TOP MASCOTAS  MÁS PESADAS");
        BotonMascotasConMasVacunas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMascotasConMasVacunasActionPerformed(evt);
            }
        });
        jPanel1.add(BotonMascotasConMasVacunas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 240, 50));

        CajaMascotasConMasVacunas.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.add(CajaMascotasConMasVacunas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 570, 760, 170));

        BotonMascotasMasPesadas.setBackground(new java.awt.Color(153, 153, 255));
        BotonMascotasMasPesadas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotonMascotasMasPesadas.setText("TOP MASCOTAS CON MÁS VACUNAS");
        BotonMascotasMasPesadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMascotasMasPesadasActionPerformed(evt);
            }
        });
        jPanel1.add(BotonMascotasMasPesadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 260, 50));

        BotonRecuentoMascotas.setBackground(new java.awt.Color(153, 153, 255));
        BotonRecuentoMascotas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotonRecuentoMascotas.setText("RECUENTO DE MASCOTAS POR ESPECIE");
        BotonRecuentoMascotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRecuentoMascotasActionPerformed(evt);
            }
        });
        jPanel1.add(BotonRecuentoMascotas, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 440, 280, 40));

        jButton1.setBackground(new java.awt.Color(153, 153, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("TOP MASCOTAS MENOS PESADAS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 500, 230, 50));

        Insertar_txt.setBackground(new java.awt.Color(255, 204, 255));
        Insertar_txt.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Insertar_txt.setText("INSERTAR TXT");
        Insertar_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insertar_txtActionPerformed(evt);
            }
        });
        jPanel1.add(Insertar_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 340, 280, 50));

        jTextField8.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.add(jTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, 190, 30));

        jTextField7.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.add(jTextField7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 250, 40));

        jTextField6.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 322, 180, 30));

        jTextField5.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 180, 40));

        jTextField4.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 180, 40));

        jTextField3.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 180, 40));

        jTextField1.setBackground(new java.awt.Color(255, 204, 51));
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 490, 400));

        Boton_Mostrar_Todo.setBackground(new java.awt.Color(153, 153, 255));
        Boton_Mostrar_Todo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Boton_Mostrar_Todo.setText("MOSTRAR TODO");
        Boton_Mostrar_Todo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_Mostrar_TodoActionPerformed(evt);
            }
        });
        jPanel1.add(Boton_Mostrar_Todo, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 400, 280, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CajaIDMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CajaIDMascotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CajaIDMascotaActionPerformed

    private void Boton_insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_insertarActionPerformed
        Connection conexion = null;

        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("Insert INTO Pacientes (IDMascota, AliasMascota, Especie, Raza, ColorPelo,FechaNacimiento, Vacunaciones)"
                    + "VALUES (?,?,?,?,?,?,?)");
            ps.setInt(1, Integer.parseInt(CajaIDMascota.getText()));
            ps.setString(2, CajaAliasMascota.getText());
            ps.setString(3, CajaEspecie.getText());
            ps.setString(4, CajaRaza.getText());
            ps.setString(5, CajaColorPelo.getText());
            ps.setDate(6, Date.valueOf(CajaFechaNacimiento.getText()));
            ps.setString(7, CajaVacunaciones.getText());

            //Ejecutamos la inserción dentro de la BD
            int resultado = ps.executeUpdate(); //En lugar de executeQuery, retorna valores enteros

            //Para comprobar que los resultados se han introducido, necesitamos que resultado sea más que 0
            if (resultado > 0) {
                JOptionPane.showMessageDialog(null, "El registro se ha realizado satisfactoriamente.");
                limpiarCajas();
            } else {
                JOptionPane.showMessageDialog(null, "ERRROR, no se han introducido los registros");
                limpiarCajas();
            }
            conexion.close();
        } catch (Exception ex) {
            System.err.println("Error, " + ex);
        }
    }//GEN-LAST:event_Boton_insertarActionPerformed

    private void Boton_ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_ModificarActionPerformed
        Connection conexion = null;

        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("UPDATE Pacientes SET IDMascota=?,AliasMascota=?,Especie=?,Raza=?,ColorPelo=?,FechaNacimiento=?,Vacunaciones=? WHERE IDMascota=?");
            ps.setInt(1, Integer.parseInt(CajaIDMascota.getText()));
            ps.setString(2, CajaAliasMascota.getText());
            ps.setString(3, CajaEspecie.getText());
            ps.setString(4, CajaRaza.getText());
            ps.setString(5, CajaColorPelo.getText());
            ps.setDate(6, Date.valueOf(CajaFechaNacimiento.getText()));
            ps.setString(7, CajaVacunaciones.getText());

            //Ejecutamos la inserción dentro de la BD
            int resultado = ps.executeUpdate(); //En lugar de executeQuery, retorna valores enteros

            //Para comprobar que los resultados se han introducido, necesitamos que resultado sea más que 0
            if (resultado > 0) {
                JOptionPane.showMessageDialog(null, "El registro se ha modificado satisfactoriamente.");
                limpiarCajas();
            } else {
                JOptionPane.showMessageDialog(null, "ERRROR, no se han modificado los registros");
                limpiarCajas();
            }
            conexion.close();
        } catch (Exception ex) {
            System.err.println("Error, " + ex);
        }


    }//GEN-LAST:event_Boton_ModificarActionPerformed

    private void Boton_BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_BuscarActionPerformed
        Connection conexion = null;
        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("SELECT * FROM Pacientes WHERE IDMascota=?");
            ps.setInt(1, (Integer.parseInt(CajaBuscar.getText())));
            rs = ps.executeQuery(); //Buscar
            // rs = ps.executeUpdate() INTRODUCE datos, en este caso no se usa
            //Comprobamos si hemos obtenido algo, si es true, es que hemos obtenido algo
            if (rs.next()) {
                CajaIDMascota.setText(String.valueOf(rs.getInt("IDMascota")));
                CajaAliasMascota.setText(rs.getString("AliasMascota"));
                CajaEspecie.setText(rs.getString("Especie"));
                CajaRaza.setText(rs.getString("Raza"));
                CajaColorPelo.setText(rs.getString("ColorPelo"));
                CajaFechaNacimiento.setText(String.valueOf(rs.getDate("FechaNacimiento")));
                CajaVacunaciones.setText(rs.getString("Vacunaciones"));
            } else {
                JOptionPane.showMessageDialog(null, "No existe una persona con esa clave");
            }
            conexion.close();

        } catch (Exception ex) {
            System.err.println("Error" + ex);
        }
    }//GEN-LAST:event_Boton_BuscarActionPerformed

    private void Boton_LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_LimpiarActionPerformed
        limpiarCajas();
    }//GEN-LAST:event_Boton_LimpiarActionPerformed

    private void Boton_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_EliminarActionPerformed
        Connection conexion = null;

        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("DELETE FROM Pacientes WHERE IDMascota=?");
            ps.setInt(1, (Integer.parseInt(CajaBuscar.getText())));
            //Ejecutamos la eliminación dentro de la BD
            int resultado = ps.executeUpdate(); //En lugar de executeQuery, retorna valores enteros

            //Para comprobar que los resultados se han introducido, necesitamos que resultado sea más que 0
            if (resultado > 0) {
                JOptionPane.showMessageDialog(null, "El registro se ha eliminado satisfactoriamente.");
                limpiarCajas();
            } else {
                JOptionPane.showMessageDialog(null, "ERRROR, no se han eliminado los registros");
                limpiarCajas();
            }
            conexion.close();
        } catch (Exception ex) {
            System.err.println("Error, " + ex);
        }


    }//GEN-LAST:event_Boton_EliminarActionPerformed

    private void BotonMascotasConMasVacunasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMascotasConMasVacunasActionPerformed
        String cadena = "";
        Connection conexion = null;

        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("SELECT Peso,IDMascota FROM Pesos Order By Peso DESC LIMIT 3;");

            rs = ps.executeQuery(); //Buscar
            // rs = ps.executeUpdate() INTRODUCE datos, en este caso no se usa
            //Comprobamos si hemos obtenido algo, si es true, es que hemos obtenido algo
            // if(rs.next()){

            // CajaMascotasConMasVacunas.setText(rs.getString("IDMascota"));
            // CajaMascotasConMasVacunas.setText(String.valueOf(rs.getInt("Peso")));
            while (rs.next()) {
                System.out.println(rs.getInt("IDMascota") + "" + rs.getInt("Peso"));
                cadena += "\nSu ID es: " + String.valueOf(rs.getInt("IDMascota") + " y su peso es: " + rs.getInt("Peso") + "\n");

            }
            CajaMascotasConMasVacunas.setText(cadena);
            //}else{
            //    JOptionPane.showMessageDialog(null, "No existe una persona con esa clave");
            // }
            conexion.close();

        } catch (Exception ex) {
            System.err.println("Error" + ex);
        }

    }//GEN-LAST:event_BotonMascotasConMasVacunasActionPerformed

    private void BotonMascotasMasPesadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMascotasMasPesadasActionPerformed

        String cadena = "";
        Connection conexion = null;

        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("SELECT m.IDMascota, COUNT(IDVacunas) as NVacunas\n"
                    + "FROM Pacientes m\n"
                    + "INNER JOIN Vacunas v ON m.IDMascota = v.IDMascota\n"
                    + "GROUP BY m.IDMascota\n"
                    + "ORDER BY NVacunas DESC\n"
                    + "LIMIT 3;");

            rs = ps.executeQuery(); //Buscar

            while (rs.next()) {
                System.out.println(rs.getInt("IDMascota"));
                cadena += "Su ID es: " + String.valueOf(rs.getInt("IDMascota") + "\n y el número de vacunas es: " + rs.getInt("NVacunas") + " ");

            }
            CajaMascotasConMasVacunas.setText(cadena);

            conexion.close();

        } catch (Exception ex) {
            System.err.println("Error" + ex);
        }
    }//GEN-LAST:event_BotonMascotasMasPesadasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String cadena = "";
        Connection conexion = null;

        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("SELECT Peso FROM Pesos Order By Peso ASC LIMIT 3;");

            rs = ps.executeQuery(); //Buscar
            // rs = ps.executeUpdate() INTRODUCE datos, en este caso no se usa
            //Comprobamos si hemos obtenido algo, si es true, es que hemos obtenido algo
            // if(rs.next()){

            // CajaMascotasConMasVacunas.setText(rs.getString("IDMascota"));
            // CajaMascotasConMasVacunas.setText(String.valueOf(rs.getInt("Peso")));
            while (rs.next()) {
                System.out.println(rs.getInt("Peso"));
                cadena += String.valueOf(rs.getInt("Peso") + " \n< ");

            }
            CajaMascotasConMasVacunas.setText(cadena);
            //}else{
            //    JOptionPane.showMessageDialog(null, "No existe una persona con esa clave");
            // }
            conexion.close();

        } catch (Exception ex) {
            System.err.println("Error" + ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void BotonRecuentoMascotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRecuentoMascotasActionPerformed
        String cadena = "";
        Connection conexion = null;

        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("SELECT Especie, COUNT(IDMascota) as Recuento\n"
                    + "FROM Pacientes\n"
                    + "Group By Especie\n"
                    + "Order By Recuento\n"
                    + "Limit 3;");

            rs = ps.executeQuery(); //Buscar
            while (rs.next()) {
                //System.out.println(rs.getInt("IDMascota"));
                System.out.println(rs.getString("Especie") + " " + (String.valueOf(rs.getInt("Recuento"))));
                cadena += rs.getString("Especie") + " " + String.valueOf(rs.getInt("Recuento")) + "\n";

            }
            CajaMascotasConMasVacunas.setText(cadena);

            conexion.close();

        } catch (Exception ex) {
            System.err.println("Error" + ex);
        }

    }//GEN-LAST:event_BotonRecuentoMascotasActionPerformed

    private void Insertar_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insertar_txtActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        Scanner entrada = null;
        fileChooser.showOpenDialog(fileChooser);
        try {
            String ruta = fileChooser.getSelectedFile().getAbsolutePath();
            File f = new File(ruta);
            entrada = new Scanner(f);
            while (entrada.hasNext()) {
                System.out.println(entrada.nextLine());
            }
                               
            BufferedReader br = new BufferedReader(new FileReader(ruta));
            String linea;
            while ((linea = br.readLine()) != null) { // Para insertar datos
                String[] campos = linea.split(",");
conexion = getConnection();
            ps = conexion.prepareStatement("Insert INTO Pacientes (IDMascota, AliasMascota, Especie, Raza, ColorPelo,FechaNacimiento, Vacunaciones)"
                    + "VALUES (?,?,?,?,?,?,?)");
            ps.setInt(1,Integer.parseInt("IDMascota"));
            ps.setString(2,"AliasMascota" );
            ps.setString(3,"Especie" );
            ps.setString(4, "Raza");
            ps.setString(5,"ColorPelo" );
            ps.setString(6,"FechaNacimiento");
            ps.setString(7,"Vacunaciones" );
                ps.executeUpdate();
            }
            br.close();


        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (NullPointerException e) {
            System.out.println("No se ha seleccionado ningún fichero");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            if (entrada != null) {
                entrada.close();
            }
        }

    }//GEN-LAST:event_Insertar_txtActionPerformed

    private void Boton_Mostrar_TodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_Mostrar_TodoActionPerformed
        String cadena = "";
        Connection conexion = null;

        try {
            conexion = getConnection();
            ps = conexion.prepareStatement("SELECT * FROM Pacientes;");

            rs = ps.executeQuery(); //Buscar
           

            
            while (rs.next()) {
            while (rs.next()) {
               System.out.println(
                       cadena+= String.valueOf(rs.getInt("IDMascota")) + "," + rs.getString("AliasMascota")
                        + "," + rs.getString("Especie") + "," + rs.getString("Raza")+ rs.getString("ColorPelo") + "," +rs.getString("FechaNacimiento")+ "," + rs.getString("Vacunaciones") + "," );
            }


            }
            CajaMascotasConMasVacunas.setText(cadena);
            //}else{
            //    JOptionPane.showMessageDialog(null, "No existe una persona con esa clave");
            // }
            conexion.close();

        } catch (Exception ex) {
            System.err.println("Error" + ex);
        }

    }//GEN-LAST:event_Boton_Mostrar_TodoActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        Aplicacion aplicacion = new Aplicacion();

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aplicacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AliasMascota;
    private javax.swing.JButton BotonMascotasConMasVacunas;
    private javax.swing.JButton BotonMascotasMasPesadas;
    private javax.swing.JButton BotonRecuentoMascotas;
    private javax.swing.JButton Boton_Buscar;
    private javax.swing.JButton Boton_Eliminar;
    private javax.swing.JButton Boton_Limpiar;
    private javax.swing.JButton Boton_Modificar;
    private javax.swing.JButton Boton_Mostrar_Todo;
    private javax.swing.JButton Boton_insertar;
    private javax.swing.JTextField CajaAliasMascota;
    private javax.swing.JTextField CajaBuscar;
    private javax.swing.JTextField CajaColorPelo;
    private javax.swing.JTextField CajaEspecie;
    private javax.swing.JTextField CajaFechaNacimiento;
    private javax.swing.JTextField CajaIDMascota;
    private javax.swing.JTextField CajaMascotasConMasVacunas;
    private javax.swing.JTextField CajaRaza;
    private javax.swing.JTextField CajaVacunaciones;
    private javax.swing.JLabel ColorPelo;
    private javax.swing.JLabel Especie;
    private javax.swing.JLabel FechaNacimiento;
    private javax.swing.JLabel IDMascota;
    private javax.swing.JButton Insertar_txt;
    private javax.swing.JLabel Raza;
    private javax.swing.JLabel Vacunaciones;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
